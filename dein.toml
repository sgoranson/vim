[[plugins]]
repo = 'neoclide/coc.nvim'
build = './install.sh nightly'
merged = 0
hook_add = '''

" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

inoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<S-Tab>"



"inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<CR>"


let g:coc_snippet_next = '<TAB>'
let g:coc_snippet_prev = '<S-TAB>'


" Use <c-space> for trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <cr> for confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use K for show documentation in preview window
" Remap for format selected region
vmap <leader>f  <Plug>(coc-format-selected)
" nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Use `:Format` for format current buffer
command! -nargs=0 Format :call CocAction('format')

command! -nargs=0 Prettier :CocCommand prettier.formatFile
nmap <leader>f :Format<CR>

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

let g:coc_global_extensions = [
\ 'coc-json', 'coc-yaml', 'coc-lists', 
\ 'coc-python', 'coc-highlight', 'coc-yank', 'coc-solargraph',
\ 'coc-tsserver', 'coc-html', 'coc-css', 
\  'coc-snippets', 'coc-emoji', 'coc-prettier', 'coc-emmet'
\ ]




command! -nargs=+ -complete=custom,s:GrepArgs Rg exe 'CocList grep '.<q-args>
 
function! s:GrepArgs(...)
  let list = ['-S', '-smartcase', '-i', '-ignorecase', '-w', '-word',
        \ '-e', '-regex', '-u', '-skip-vcs-ignores', '-t', '-extension']
  return join(list, "\n")
endfunction

vnoremap <leader>g :<C-u>call <SID>GrepFromSelected(visualmode())<CR>
nnoremap <leader>g :<C-u>set operatorfunc=<SID>GrepFromSelected<CR>g@
 
function! s:GrepFromSelected(type)
  let saved_unnamed_register = @@
  if a:type ==# 'v'
    normal! `<v`>y
  elseif a:type ==# 'char'
    normal! `[v`]y
  else
    return
  endif
  let word = substitute(@@, '\n$', '', 'g')
  let word = escape(word, '| ')
  let @@ = saved_unnamed_register
  execute 'CocList grep '.word
endfunction


nnoremap <silent> <space>w  :exe 'CocList -I --normal --input='.expand('<cword>').' words'<CR>



nmap <silent> gD <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nnoremap <silent> gd :call <SID>show_documentation()<CR>

vmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

'''

[[plugins]]
repo = 'Shougo/echodoc.vim'
hook_add = '''
set cmdheight=2
'''





[[plugins]]
repo = 'mbbill/undotree'


[[plugins]]
repo = 'tpope/vim-fugitive'                        # git helper

[[plugins]]
repo = 'vim-scripts/SyntaxAttr.vim'                        # git helper

[[plugins]]
repo = 'xolox/vim-misc'                        # git helper

[[plugins]]
repo = 'xolox/vim-session'                        # git helper
hook_add = '''
let g:session_autoload = 'no' 
let g:session_autosave = 'no'
'''


[[plugins]]
repo = 'airblade/vim-gitgutter'                  # shows changed lines, ]c hunk jumps
hook_add = '''
let g:gitgutter_highlight_lines=1
'''

[[plugins]]
repo =  'kshenoy/vim-signature'                # shows marks, m/ shortcuts



[[plugins]]
repo =  'rbgrouleff/bclose.vim'                # shows marks, m/ shortcuts

[[plugins]]
repo = 'Shougo/dein.vim' 




[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'






[[plugins]]
repo = 'airblade/vim-rooter'    
hook_add = '''

    "let g:rooter_manual_only = 0
    let g:rooter_silent_chdir = 1
    let g:rooter_resolve_links = 1
'''

[[plugins]]
repo = 'Shougo/vimfiler.vim'
hook_add = '''
    let g:vimfiler_as_default_explorer = 1
    let g:vimfiler_ignore_pattern = '^\%(\.git\|\.DS_Store\)$'
'''






[[plugins]]
repo = 'haya14busa/vim-textobj-function-syntax'  # req lib

[[plugins]]
repo = 'kana/vim-textobj-user'                   # req lib (diy objs)

[[plugins]]
repo = 'kana/vim-textobj-indent'                 # i textobj

[[plugins]]
repo = 'kana/vim-textobj-function'               # f textobj

[[plugins]]
repo = 'kana/vim-textobj-line'                   # l textobj

[[plugins]]
repo = 'beloglazov/vim-textobj-quotes'           # q textobj

[[plugins]]
repo = 'kana/vim-textobj-help'

[[plugins]]
repo = 'rhysd/vim-textobj-anyblock'               # b textobj (parens, quotes, brackets, <)

[[plugins]]
repo = 'wellle/targets.vim'               # b textobj (parens, quotes, brackets, <)

[[plugins]]
repo = 'terryma/vim-expand-region'

[[plugins]]
repo =  'easymotion/vim-easymotion'
hook_add = '''
let g:Easymotion_do_mapping = 0
let g:EasyMotion_smartcase = 1
let g:EasyMotion_use_upper = 1
let g:EasyMotion_enter_jump_first = 1
let g:EasyMotion_keys = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ;'
'''

[[plugins]]
repo =  'junegunn/vim-easy-align'                   # ga =




[[plugins]]
repo = 'vim-airline/vim-airline-themes'


[[plugins]]
repo = 'Shougo/deol.nvim'

[[plugins]]
repo = 'vim-airline/vim-airline'
depends = 'vim-airline-themes'
hook_add = '''



  let g:airline_powerline_fonts = 1
    let g:airline_theme='base16_spacemacs'
    let g:airline_minimalist_showmod = 1

" let g:airline_left_sep = ''
" let g:airline_left_alt_sep = ''
" let g:airline_right_sep = ''
" let g:airline_right_alt_sep = ''


  if ! exists('g:airline_symbols')
      let g:airline_symbols = {}
  endif

  let g:airline_symbols.branch = ''
  let g:airline_symbols.readonly = ''
  let g:airline_symbols.linenr = '☰'
  let g:airline_symbols.maxlinenr = ''

let g:airline_left_sep = "\uE0B8"
let g:airline_left__alt_sep = "\uE0B9"
let g:airline_right_sep = "\uE0Ba"
let g:airline_right_alt_sep = "\uE0cb"
" let g:airline_left_sep =       "\uE0c0"
" let g:airline_left__alt_sep =  "\uE0c1"
" let g:airline_right_sep =      "\uE0c2"
" let g:airline_right_alt_sep =  "\uE0c3"

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#tabline#show_tab_nr = 0
let g:airline#extensions#tabline#show_tab_type = 1
let g:airline#extensions#tabline#close_symbol = '×'
let g:airline#extensions#tabline#show_close_button = 0
" let g:airline#extensions#tabline#formatter = 'unique_tail_improved'

let g:airline#extensions#tabline#fnamemod = ':t' 

let g:airline_section_error = '%{airline#util#wrap(airline#extensions#coc#get_error(),0)}'
let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'

" function! AirlineInit()
"  let root = fnamemodify(get(b:, 'git_dir'), ':~:h')
"   " let g:airline_section_d = airline#section#create(['%{getcwd()}'])
"   let g:airline_section_c = airline#section#create_left(['%{fnamemodify(getcwd(),":~")}', '%{coc#status()}', '%{airline#extensions#fugitiveline#bufname()}'])
" endfunction
" autocmd User AirlineAfterInit call AirlineInit()
"  let g:airline#extensions#disable_rtp_load = 1
"  let g:airline_extensions = ['branch', 'coc', 'fugitiveline', 'hunks', 'quickfix', 'term', 'undotree', 'whitespace' ]
'''

[[plugins]]
repo = 'tpope/vim-eunuch'                          # :Delete, :Rename, :SudoWrite


[[plugins]]
repo = 'tomtom/tcomment_vim'                      # gcc


[[plugins]]
repo = 'tpope/vim-surround'                        

[[plugins]]
repo = 'tommcdo/vim-exchange'                        # cx holy shit

[[plugins]]
repo = 'tpope/vim-repeat'                          # dot repeat for plugins


[[plugins]]
repo = 'tpope/vim-unimpaired'                      # yo, ]b, etc

[[plugins]]
repo =  'junegunn/gv.vim'


[[plugins]]
repo =  'lambdalisue/gina.vim'

# [[plugins]]
# repo =  'Chiel92/vim-autoformat'                # shows marks, m/ shortcuts
# hook_add = '''
# let g:formatters_python = ['yapf']
# let g:formatters_javascript = ['prettier']
# let g:formatters_css = ['prettier']
# '''
# [[plugins]]
# repo =  'chrisbra/Colorizer'

[[plugins]]
repo =  'godlygeek/tabular'

[[plugins]]
repo =  'KabbAmine/vCoolor.vim'
hook_add = '''
    let g:vcoolor_disable_mappings = 1
'''

[[plugins]]
repo =  'gabrielelana/vim-markdown'
hook_add = '''
let g:markdown_mapping_switch_status = '<Leader>s'
let g:markdown_enable_spell_checking = 0
'''


[[plugins]]
repo =  'jeetsukumaran/vim-buffergator'
hook_add = '''
let  g:buffergator_suppress_keymaps=1
'''
